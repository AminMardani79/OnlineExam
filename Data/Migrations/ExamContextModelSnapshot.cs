// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ExamContext))]
    partial class ExamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domin.Models.AdminModel", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ActiveAccount")
                        .HasColumnType("bit");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AdminImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAdminDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.ToTable("AdminModels");
                });

            modelBuilder.Entity("Domin.Models.AnswerModel", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerChecked")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AnswerContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnswerNumber")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<bool>("IsDescriptive")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("AnswerModels");
                });

            modelBuilder.Entity("Domin.Models.GradeModel", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsGradeDelete")
                        .HasColumnType("bit");

                    b.HasKey("GradeId");

                    b.ToTable("GradeModels");
                });

            modelBuilder.Entity("Domin.Models.LessonModel", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLessonDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LessonId");

                    b.HasIndex("GradeId");

                    b.ToTable("LessonModels");
                });

            modelBuilder.Entity("Domin.Models.LevelPercentModel", b =>
                {
                    b.Property<int>("LevelPercentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<double>("TestLevel")
                        .HasMaxLength(100)
                        .HasColumnType("float");

                    b.Property<double>("TestScore")
                        .HasMaxLength(100)
                        .HasColumnType("float");

                    b.HasKey("LevelPercentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("LevelPercentModels");
                });

            modelBuilder.Entity("Domin.Models.MasterWithStudentModel", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("MasterWithStudent");
                });

            modelBuilder.Entity("Domin.Models.MerchantModel", b =>
                {
                    b.Property<int>("MerchantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MerchantKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MerchantId");

                    b.ToTable("MerchantModels");
                });

            modelBuilder.Entity("Domin.Models.OrderDetailModel", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TestId");

                    b.ToTable("OrderDetailModels");
                });

            modelBuilder.Entity("Domin.Models.OrderModel", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinally")
                        .HasColumnType("bit");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("StudentId");

                    b.ToTable("OrderModel");
                });

            modelBuilder.Entity("Domin.Models.QuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Descriptive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TestKeyAnswer")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("QuestionModels");
                });

            modelBuilder.Entity("Domin.Models.StudentModel", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveAccount")
                        .HasColumnType("bit");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStudentDelete")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("StudentAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StudentNationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("GradeId");

                    b.ToTable("StudentModels");
                });

            modelBuilder.Entity("Domin.Models.TeacherLessonModel", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("LessonId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherLessonModels");
                });

            modelBuilder.Entity("Domin.Models.TeacherModel", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ActiveAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeacherDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TeacherImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TeacherId");

                    b.ToTable("TeacherModels");
                });

            modelBuilder.Entity("Domin.Models.TestModel", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTest")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Finish")
                        .HasColumnType("bit");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComprehensiveTest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<bool>("NegativePoint")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTest")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("TestCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TestDayTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("TestDuration")
                        .HasColumnType("time");

                    b.Property<string>("TestFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TestPrice")
                        .HasColumnType("float");

                    b.Property<string>("TestTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TestId");

                    b.HasIndex("GradeId");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TestModels");
                });

            modelBuilder.Entity("Domin.Models.TestStudentsModel", b =>
                {
                    b.Property<int>("TestStudentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnterCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsShowingWorkBook")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmitAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("TestStudentsId");

                    b.HasIndex("TestId");

                    b.ToTable("TestStudentsModels");
                });

            modelBuilder.Entity("Domin.Models.WorkBookModel", b =>
                {
                    b.Property<int>("WorkBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LessonScore")
                        .HasColumnType("int");

                    b.Property<double>("Level")
                        .HasColumnType("float");

                    b.Property<int>("NoCheckedAnswers")
                        .HasColumnType("int");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.Property<int>("QuestionCounts")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("TrueAnswers")
                        .HasColumnType("int");

                    b.Property<int>("WrongAnswers")
                        .HasColumnType("int");

                    b.HasKey("WorkBookId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("WorkBookModels");
                });

            modelBuilder.Entity("Domin.Models.AnswerModel", b =>
                {
                    b.HasOne("Domin.Models.StudentModel", "StudentModel")
                        .WithMany("AnswerModels")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domin.Models.TestModel", "TestModel")
                        .WithMany("AnswerModels")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentModel");

                    b.Navigation("TestModel");
                });

            modelBuilder.Entity("Domin.Models.LessonModel", b =>
                {
                    b.HasOne("Domin.Models.GradeModel", "Grade")
                        .WithMany("Lessons")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Domin.Models.LevelPercentModel", b =>
                {
                    b.HasOne("Domin.Models.StudentModel", "StudentModel")
                        .WithMany("LevelPercentModels")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domin.Models.TestModel", "TestModel")
                        .WithMany("LevelPercentModels")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentModel");

                    b.Navigation("TestModel");
                });

            modelBuilder.Entity("Domin.Models.MasterWithStudentModel", b =>
                {
                    b.HasOne("Domin.Models.StudentModel", "Student")
                        .WithMany("MasterWithStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domin.Models.TeacherModel", "Teacher")
                        .WithMany("MasterWithStudent")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domin.Models.OrderDetailModel", b =>
                {
                    b.HasOne("Domin.Models.OrderModel", "Order")
                        .WithMany("OrderDetailModel")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domin.Models.TestModel", "TestModel")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("TestModel");
                });

            modelBuilder.Entity("Domin.Models.OrderModel", b =>
                {
                    b.HasOne("Domin.Models.StudentModel", "StudentModel")
                        .WithMany("OrderModels")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentModel");
                });

            modelBuilder.Entity("Domin.Models.QuestionModel", b =>
                {
                    b.HasOne("Domin.Models.TestModel", "Test")
                        .WithMany("Question")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domin.Models.StudentModel", b =>
                {
                    b.HasOne("Domin.Models.GradeModel", "Grade")
                        .WithMany("Students")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Domin.Models.TeacherLessonModel", b =>
                {
                    b.HasOne("Domin.Models.LessonModel", "LessonModel")
                        .WithMany("TeacherLessonModels")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domin.Models.TeacherModel", "TeacherModel")
                        .WithMany("TeacherLessonModels")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonModel");

                    b.Navigation("TeacherModel");
                });

            modelBuilder.Entity("Domin.Models.TestModel", b =>
                {
                    b.HasOne("Domin.Models.GradeModel", "Grade")
                        .WithMany("TestModels")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domin.Models.LessonModel", "Lesson")
                        .WithMany("TestModels")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domin.Models.TeacherModel", "Teacher")
                        .WithMany("TestModels")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Lesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domin.Models.TestStudentsModel", b =>
                {
                    b.HasOne("Domin.Models.TestModel", "TestModel")
                        .WithMany("TestStudentsModels")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestModel");
                });

            modelBuilder.Entity("Domin.Models.WorkBookModel", b =>
                {
                    b.HasOne("Domin.Models.StudentModel", "StudentModel")
                        .WithMany("WorkBookModels")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domin.Models.TestModel", "TestModel")
                        .WithMany("WorkBookModels")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentModel");

                    b.Navigation("TestModel");
                });

            modelBuilder.Entity("Domin.Models.GradeModel", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Students");

                    b.Navigation("TestModels");
                });

            modelBuilder.Entity("Domin.Models.LessonModel", b =>
                {
                    b.Navigation("TeacherLessonModels");

                    b.Navigation("TestModels");
                });

            modelBuilder.Entity("Domin.Models.OrderModel", b =>
                {
                    b.Navigation("OrderDetailModel");
                });

            modelBuilder.Entity("Domin.Models.StudentModel", b =>
                {
                    b.Navigation("AnswerModels");

                    b.Navigation("LevelPercentModels");

                    b.Navigation("MasterWithStudent");

                    b.Navigation("OrderModels");

                    b.Navigation("WorkBookModels");
                });

            modelBuilder.Entity("Domin.Models.TeacherModel", b =>
                {
                    b.Navigation("MasterWithStudent");

                    b.Navigation("TeacherLessonModels");

                    b.Navigation("TestModels");
                });

            modelBuilder.Entity("Domin.Models.TestModel", b =>
                {
                    b.Navigation("AnswerModels");

                    b.Navigation("LevelPercentModels");

                    b.Navigation("OrderDetails");

                    b.Navigation("Question");

                    b.Navigation("TestStudentsModels");

                    b.Navigation("WorkBookModels");
                });
#pragma warning restore 612, 618
        }
    }
}
